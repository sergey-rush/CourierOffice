package ru.courier.office.web;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.AsyncTask;
import android.support.v7.app.AlertDialog;
import android.util.Log;
import android.view.View;

import java.util.List;

import ru.courier.office.R;
import ru.courier.office.core.Application;
import ru.courier.office.core.Document;
import ru.courier.office.core.LocalSettings;
import ru.courier.office.core.Scan;
import ru.courier.office.core.ScanStatus;
import ru.courier.office.data.DataAccess;
import ru.courier.office.views.ApplicationFragment;
import ru.courier.office.views.DrawerActivity;
import ru.courier.office.views.LoginActivity;

public class ScanManager extends AsyncTask<Void, Void, Void> {

    private int responseCode;
    private Context _context;
    private Application _application;
    private WebContext _webContext;
    private String deviceId;
    private DataAccess _dataAccess;

    public ScanManager(Context context, Application application) {
        _context = context;
        _application = application;
        _webContext = WebContext.getInstance();
        deviceId = LocalSettings.getDeviceID(_context);
        _dataAccess = DataAccess.getInstance(_context);
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
    }

    @Override
    protected Void doInBackground(Void... arg0) {

        List<Document> documents = _dataAccess.getDocumentsByApplicationGuid(_application.ApplicationGuid);

        for (Document document : documents) {
            List<Scan> scans = _dataAccess.getScansByDocumentId(document.Id);
            for (Scan scan : scans) {
                _webContext.Scan = scan;

                if (scan.ScanStatus == ScanStatus.None) {
                    String postData = FormatPayload(document, scan);
                    ScanProvider scanProvider = new ScanProvider();
                    responseCode = scanProvider.getInfo(postData);
                    _dataAccess.updateScan(_webContext.Scan);
                }

                uploadScan(_webContext.Scan);

                //break;
            }
        }
        return null;
    }

    public void uploadScan(Scan scan) {

        int imageLength = scan.ImageLength;
        int sendBytes = 0;
        int bufferLength = 1 * 1024 * 1024;

        while (sendBytes < imageLength) {

            if (bufferLength > imageLength - sendBytes) {
                bufferLength = imageLength - sendBytes;
            }

            byte[] imageBytes = _dataAccess.getScanImage(scan.Id, sendBytes, bufferLength);
            int imageBytesLength = imageBytes.length;
            ScanProvider scanProvider = new ScanProvider();
            scanProvider.doUpload(scan, imageBytes);
            sendBytes = sendBytes + imageBytesLength;
        }
    }

    private String FormatPayload(Document document, Scan scan)
    {
        String photoId = scan.PhotoGuid;
        String appId = scan.ApplicationGuid;
        String fileName = document.Title;
        String appType = "CourierAppV2";
        String docId = document.DocumentGuid;
        String pageNum = Integer.toString(scan.PageNum);
        String postData = String.format("{\"PhotoId\":\"%s\", \"ApplicationId\":\"%s\", \"FileName\":\"%s\", \"AppType\":\"%s\", \"DocumentId\":\"%s\", \"PageNum\":\"%s\", \"Imei\":\"%s\"}", photoId, appId, fileName, appType, docId, pageNum, deviceId);
        return postData;
    }

    @Override
    protected void onPostExecute(Void output) {
        super.onPostExecute(output);

        if (responseCode == 200) {

            return;
        }
    }
}